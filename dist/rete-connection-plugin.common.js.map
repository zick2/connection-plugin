{"version":3,"file":"rete-connection-plugin.common.js","sources":["src/pseudoconnection.ts","src/utils.ts","src/flow/base.ts","src/flow/utils.ts","src/flow/builtin/bidirect.ts","src/flow/builtin/classic/sync-connections.ts","src/flow/builtin/classic/index.ts","src/presets/classic.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { getUID } from 'rete'\r\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\r\n\r\nimport { ClassicScheme, Position, SocketData } from './types'\r\n\r\n/**\r\n * Create pseudoconnection. Used to trigger rendering of connection that is being created by user.\r\n * Has additional `isPseudo` property in payload.\r\n * @param extra Extra payload to add to connection\r\n */\r\nexport function createPseudoconnection<Schemes extends ClassicScheme, K>(extra?: Partial<Schemes['Connection']>) {\r\n  let element: HTMLElement | null = null\r\n  let id: string | null = null\r\n\r\n  function unmount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\r\n    if (id) {\r\n      areaPlugin.removeConnectionView(id)\r\n    }\r\n    element = null\r\n    id = null\r\n  }\r\n  function mount(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>) {\r\n    unmount(areaPlugin)\r\n    id = `pseudo_${getUID()}`\r\n  }\r\n\r\n  return {\r\n    isMounted() {\r\n      return Boolean(id)\r\n    },\r\n    mount,\r\n    render(areaPlugin: BaseAreaPlugin<Schemes, BaseArea<Schemes> | K>, { x, y }: Position, data: SocketData) {\r\n      const isOutput = data.side === 'output'\r\n      const pointer = {\r\n        x: x + (isOutput\r\n          ? -3\r\n          : 3),\r\n        y\r\n      } // fix hover of underlying elements\r\n\r\n      if (!id) throw new Error('pseudo connection id wasn\\'t generated')\r\n\r\n      const payload = isOutput\r\n        ? {\r\n          id,\r\n          source: data.nodeId,\r\n          sourceOutput: data.key,\r\n          target: '',\r\n          targetInput: '',\r\n          ...extra ?? {}\r\n        }\r\n        : {\r\n          id,\r\n          target: data.nodeId,\r\n          targetInput: data.key,\r\n          source: '',\r\n          sourceOutput: '',\r\n          ...extra ?? {}\r\n        }\r\n\r\n      if (!element) {\r\n        const view = areaPlugin.addConnectionView(payload)\r\n\r\n        element = view.element\r\n      }\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\r\n      if (!element) return\r\n\r\n      void areaPlugin.emit({\r\n        type: 'render',\r\n        data: {\r\n          element,\r\n          type: 'connection',\r\n          payload,\r\n          ...isOutput\r\n            ? { end: pointer }\r\n            : { start: pointer }\r\n        }\r\n      })\r\n    },\r\n    unmount\r\n  }\r\n}\r\n","import { SocketData } from './types'\r\n/**\r\n * @param elements list of Element returned by document.elementsFromPoint\r\n */\r\nexport function findSocket(socketsCache: WeakMap<Element, SocketData>, elements: Element[]) {\r\n  for (const element of elements) {\r\n    const found = socketsCache.get(element)\r\n\r\n    if (found) {\r\n      return found\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Alternative to document.elementsFromPoint that traverses shadow roots\r\n * @param x x coordinate\r\n * @param y y coordinate\r\n * @param root root element to search in\r\n */\r\nexport function elementsFromPoint(x: number, y: number, root: ShadowRoot | Document = document) {\r\n  const elements = root.elementsFromPoint(x, y)\r\n  const shadowRoot = elements[0]?.shadowRoot\r\n\r\n  if (shadowRoot && shadowRoot !== root) {\r\n    elements.unshift(...elementsFromPoint(x, y, shadowRoot))\r\n  }\r\n\r\n  return elements\r\n}\r\n","import { BaseSchemes, NodeEditor, Scope } from 'rete'\r\n\r\nimport { Connection, SocketData } from '../types'\r\n\r\nexport type Context<Schemes extends BaseSchemes, K extends any[]> = {\r\n  editor: NodeEditor<Schemes>\r\n  scope: Scope<Connection, K>\r\n  socketsCache: Map<Element, SocketData>\r\n}\r\nexport type EventType = 'up' | 'down'\r\nexport type PickParams = { socket: SocketData, event: EventType }\r\n\r\nexport abstract class Flow<Schemes extends BaseSchemes, K extends any[]> {\r\n  public abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\r\n  public abstract getPickedSocket(): SocketData | undefined\r\n  public abstract drop(context: Context<Schemes, K>): void\r\n}\r\n","import { getUID } from 'rete'\r\n\r\nimport { ClassicScheme, SocketData } from '../types'\r\nimport { Context, PickParams } from './base'\r\n\r\nexport interface StateContext<Schemes extends ClassicScheme, K extends any[]> {\r\n  currentState: State<Schemes, K>\r\n  switchTo(state: State<Schemes, K>): void\r\n}\r\n\r\nexport abstract class State<Schemes extends ClassicScheme, K extends any[]> {\r\n  context!: StateContext<Schemes, K>\r\n  initial: SocketData | undefined\r\n\r\n  setContext(context: StateContext<Schemes, K>) {\r\n    this.context = context\r\n  }\r\n\r\n  abstract pick(params: PickParams, context: Context<Schemes, K>): Promise<void>\r\n  abstract drop(context: Context<Schemes, K>): void\r\n}\r\n\r\nexport function getSourceTarget(initial: SocketData, socket: SocketData) {\r\n  const forward = (initial.side === 'output' && socket.side === 'input') || (initial.side === 'output' && socket.side === 'output') \r\n  const backward = (initial.side === 'input' && socket.side === 'output') || (initial.side === 'input' && socket.side === 'input')\r\n  const [source, target] = forward\r\n    ? [initial, socket]\r\n    : backward\r\n      ? [socket, initial]\r\n      : []\r\n\r\n  if (source && target) return [source, target]\r\n}\r\n\r\nexport function canMakeConnection(initial: SocketData, socket: SocketData) {\r\n  return Boolean(getSourceTarget(initial, socket))\r\n}\r\n\r\nexport function makeConnection<Schemes extends ClassicScheme, K extends any[]>(initial: SocketData, socket: SocketData, context: Context<Schemes, K>) {\r\n  const [source, target] = getSourceTarget(initial, socket) || [null, null]\r\n\r\n  if (source && target) {\r\n    void context.editor.addConnection({\r\n      id: getUID(),\r\n      source: source.nodeId,\r\n      sourceOutput: source.key,\r\n      target: target.nodeId,\r\n      targetInput: target.key\r\n    })\r\n    return true\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/require-await */\r\nimport { ClassicScheme, SocketData } from '../../types'\r\nimport { Context, Flow, PickParams } from '../base'\r\nimport { makeConnection as defaultMakeConnection, State, StateContext } from '../utils'\r\n\r\n/**\r\n * Bidirect flow params\r\n */\r\nexport type BidirectParams<Schemes extends ClassicScheme> = {\r\n  /** If true, user can pick a pseudo-connection by clicking on socket, not only by pointerdown */\r\n  pickByClick: boolean\r\n  /** Custom function to make connection */\r\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\r\n}\r\n\r\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(public initial: SocketData, private params: BidirectParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.params.makeConnection(this.initial, socket, context)) {\r\n      this.drop(context, socket, true)\r\n    } else if (!this.params.pickByClick) {\r\n      this.drop(context, socket)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<ClassicScheme, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\r\n  }\r\n}\r\n\r\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(private params: BidirectParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (event === 'down') {\r\n      if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\r\n        this.context.switchTo(new Picked(socket, this.params))\r\n      } else {\r\n        this.drop(context)\r\n      }\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    delete this.initial\r\n  }\r\n}\r\n\r\n/**\r\n * Bidirect flow. User can pick a socket and connect it by releasing mouse button.\r\n * More simple than classic flow, but less functional (can't remove connection by clicking on input socket).\r\n */\r\nexport class BidirectFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\r\n  currentState!: State<Schemes, K>\r\n\r\n  constructor(params?: Partial<BidirectParams<Schemes>>) {\r\n    const pickByClick = Boolean(params?.pickByClick)\r\n    const makeConnection = params?.makeConnection || defaultMakeConnection\r\n\r\n    this.switchTo(new Idle({ pickByClick, makeConnection }))\r\n  }\r\n\r\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\r\n    await this.currentState.pick(params, context)\r\n  }\r\n\r\n  public getPickedSocket() {\r\n    return this.currentState.initial\r\n  }\r\n\r\n  public drop(context: Context<Schemes, K>) {\r\n    this.currentState.drop(context)\r\n  }\r\n\r\n  public switchTo(state: State<Schemes, K>): void {\r\n    state.setContext(this)\r\n    this.currentState = state\r\n  }\r\n}\r\n","import { NodeEditor } from 'rete'\r\n\r\nimport { ClassicScheme, SocketData } from '../../../types'\r\n\r\nfunction findPort<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\r\n  const node = editor.getNode(socket.nodeId)\r\n\r\n  if (!node) throw new Error('cannot find node')\r\n\r\n  const list = socket.side === 'input'\r\n    ? node.inputs\r\n    : node.outputs\r\n\r\n  return list[socket.key]\r\n}\r\nfunction findConnections<Schemes extends ClassicScheme>(socket: SocketData, editor: NodeEditor<Schemes>) {\r\n  const { nodeId, side, key } = socket\r\n\r\n  return editor.getConnections().filter(connection => {\r\n    if (side === 'input') {\r\n      return connection.target === nodeId && connection.targetInput === key\r\n    }\r\n    if (side === 'output') {\r\n      return connection.source === nodeId && connection.sourceOutput === key\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Remove existing connections if Port doesnt allow multiple connections\r\n */\r\nexport function syncConnections<Schemes extends ClassicScheme>(sockets: SocketData[], editor: NodeEditor<Schemes>) {\r\n  const connections: Schemes['Connection'][] = sockets.map(socket => {\r\n    const port = findPort(socket, editor)\r\n    const multiple = port?.multipleConnections\r\n\r\n    if (multiple) return []\r\n\r\n    return findConnections(socket, editor)\r\n  }).flat()\r\n\r\n  return {\r\n    commit() {\r\n      const uniqueIds = Array.from(new Set(connections.map(({ id }) => id)))\r\n\r\n      uniqueIds.forEach(id => void editor.removeConnection(id))\r\n    }\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/require-await */\r\n\r\nimport { ClassicScheme, SocketData } from '../../../types'\r\nimport { Context, Flow, PickParams } from '../../base'\r\nimport {\r\n  canMakeConnection as defaultCanMakeConnection, makeConnection as defaultMakeConnection, State, StateContext\r\n} from '../../utils'\r\nimport { syncConnections } from './sync-connections'\r\n\r\n/**\r\n * Classic flow params\r\n */\r\nexport type ClassicParams<Schemes extends ClassicScheme> = {\r\n  /** Custom function to check if connection can be made */\r\n  canMakeConnection: (from: SocketData, to: SocketData) => boolean | undefined\r\n  /** Custom function to make connection */\r\n  makeConnection: <K extends any[]>(from: SocketData, to: SocketData, context: Context<Schemes, K>) => boolean | undefined\r\n}\r\n\r\nclass Picked<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(public initial: SocketData, private params: ClassicParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.params.canMakeConnection(this.initial, socket)) {\r\n      syncConnections([this.initial, socket], context.editor).commit()\r\n      const created = this.params.makeConnection(this.initial, socket, context)\r\n\r\n      this.drop(context, created\r\n        ? socket\r\n        : null, created)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle(this.params))\r\n  }\r\n}\r\n\r\nclass PickedExisting<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  initial!: SocketData\r\n  outputSocket: SocketData\r\n\r\n  constructor(public connection: Schemes['Connection'], private params: ClassicParams<Schemes>, context: Context<Schemes, K>) {\r\n    super()\r\n    const outputSocket = Array.from(context.socketsCache.values()).find(data => {\r\n      return data.nodeId === this.connection.source\r\n        && data.side === 'output'\r\n        && data.key === this.connection.sourceOutput\r\n    })\r\n\r\n    if (!outputSocket) throw new Error('cannot find output socket')\r\n\r\n    this.outputSocket = outputSocket\r\n  }\r\n\r\n  async init(context: Context<Schemes, K>) {\r\n    void context.scope.emit({ type: 'connectionpick', data: { socket: this.outputSocket } }).then(response => {\r\n      if (response) {\r\n        void context.editor.removeConnection(this.connection.id)\r\n        this.initial = this.outputSocket\r\n      } else {\r\n        this.drop(context)\r\n      }\r\n    })\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (this.initial && !(socket.side === 'input' && this.connection.target === socket.nodeId && this.connection.targetInput === socket.key)) {\r\n      if (this.params.canMakeConnection(this.initial, socket)) {\r\n        syncConnections([this.initial, socket], context.editor).commit()\r\n        const created = this.params.makeConnection(this.initial, socket, context)\r\n        const droppedSocket = created\r\n          ? socket\r\n          : null\r\n\r\n        this.drop(context, droppedSocket, created)\r\n      }\r\n    } else if (event === 'down') {\r\n      if (this.initial) {\r\n        syncConnections([this.initial, socket], context.editor).commit()\r\n        const created = this.params.makeConnection(this.initial, socket, context)\r\n        const droppedSocket = created\r\n          ? null\r\n          : socket\r\n\r\n        this.drop(context, droppedSocket, created)\r\n      }\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    this.context.switchTo(new Idle<Schemes, K>(this.params))\r\n  }\r\n}\r\n\r\nclass Idle<Schemes extends ClassicScheme, K extends any[]> extends State<Schemes, K> {\r\n  constructor(private params: ClassicParams<Schemes>) {\r\n    super()\r\n  }\r\n\r\n  async pick({ socket, event }: PickParams, context: Context<Schemes, K>): Promise<void> {\r\n    if (event !== 'down') return\r\n    if (socket.side === 'input') {\r\n      const connection = context\r\n        .editor.getConnections()\r\n        .find(item => item.target === socket.nodeId && item.targetInput === socket.key)\r\n\r\n      if (connection) {\r\n        const state = new PickedExisting(connection, this.params, context)\r\n\r\n        await state.init(context)\r\n        this.context.switchTo(state)\r\n        return\r\n      }\r\n    }\r\n\r\n    if (await context.scope.emit({ type: 'connectionpick', data: { socket } })) {\r\n      this.context.switchTo(new Picked(socket, this.params))\r\n    } else {\r\n      this.drop(context)\r\n    }\r\n  }\r\n\r\n  drop(context: Context<Schemes, K>, socket: SocketData | null = null, created = false): void {\r\n    if (this.initial) {\r\n      void context.scope.emit({ type: 'connectiondrop', data: { initial: this.initial, socket, created } })\r\n    }\r\n    delete this.initial\r\n  }\r\n}\r\n\r\n/**\r\n * Classic flow. User can pick/click a socket and connect it by releasing/clicking on another socket.\r\n * If connection already exists and user clicks on input socket, connection will be removed.\r\n */\r\nexport class ClassicFlow<Schemes extends ClassicScheme, K extends any[]> implements StateContext<Schemes, K>, Flow<Schemes, K> {\r\n  currentState!: State<Schemes, K>\r\n\r\n  constructor(params?: Partial<ClassicParams<Schemes>>) {\r\n    const canMakeConnection = params?.canMakeConnection || defaultCanMakeConnection\r\n    const makeConnection = params?.makeConnection || defaultMakeConnection\r\n\r\n    this.switchTo(new Idle<Schemes, K>({ canMakeConnection, makeConnection }))\r\n  }\r\n\r\n  public async pick(params: PickParams, context: Context<Schemes, K>) {\r\n    await this.currentState.pick(params, context)\r\n  }\r\n\r\n  public getPickedSocket() {\r\n    return this.currentState.initial\r\n  }\r\n\r\n  public switchTo(state: State<Schemes, K>): void {\r\n    state.setContext(this)\r\n    this.currentState = state\r\n  }\r\n\r\n  public drop(context: Context<Schemes, K>) {\r\n    this.currentState.drop(context)\r\n  }\r\n}\r\n","import { ClassicFlow } from '../flow'\r\n\r\n/**\r\n * Classic preset. Uses `ClassicFlow` for managing connections by user\r\n */\r\nexport function setup() {\r\n  return () => new ClassicFlow()\r\n}\r\n","/**\r\n * Built-in presets\r\n * @module\r\n */\r\nexport * as classic from './classic'\r\n","import { NodeEditor, Scope } from 'rete'\r\nimport { BaseArea, BaseAreaPlugin, RenderSignal } from 'rete-area-plugin'\r\n\r\nimport { Flow } from './flow'\r\nimport { EventType } from './flow/base'\r\nimport { createPseudoconnection } from './pseudoconnection'\r\nimport { ClassicScheme, Connection, Position, Preset, Side, SocketData } from './types'\r\nimport { elementsFromPoint, findSocket } from './utils'\r\n\r\nexport * from './flow'\r\nexport * as Presets from './presets'\r\nexport { createPseudoconnection } from './pseudoconnection'\r\nexport type { Connection, ConnectionExtra, Preset, Side, SocketData } from './types'\r\n\r\ntype Requires =\r\n  | { type: 'pointermove', data: { position: Position, event: PointerEvent } }\r\n  | { type: 'pointerup', data: { position: Position, event: PointerEvent } }\r\n  | RenderSignal<'socket', {\r\n    nodeId: string\r\n    side: Side\r\n    key: string\r\n  }>\r\n  | { type: 'unmount', data: { element: HTMLElement } }\r\n\r\n/**\r\n * Connection plugin. Responsible for user interaction with connections (creation, deletion)\r\n * @priority 9\r\n * @emits connectionpick\r\n * @emits connectiondrop\r\n * @listens pointermove\r\n * @listens pointerup\r\n * @listens render\r\n * @listens unmount\r\n */\r\nexport class ConnectionPlugin<Schemes extends ClassicScheme, K = Requires> extends Scope<Connection, [Requires | K]> {\r\n  presets: Preset<Schemes>[] = []\r\n  private areaPlugin!: BaseAreaPlugin<Schemes, BaseArea<Schemes>>\r\n  private editor!: NodeEditor<Schemes>\r\n  private currentFlow: Flow<Schemes, any[]> | null = null\r\n  private preudoconnection = createPseudoconnection({ isPseudo: true })\r\n  private socketsCache = new Map<Element, SocketData>()\r\n\r\n  constructor() {\r\n    super('connection')\r\n  }\r\n\r\n  /**\r\n   * Add preset to the plugin\r\n   * @param preset Preset to add\r\n   */\r\n  public addPreset(preset: Preset<Schemes>) {\r\n    this.presets.push(preset)\r\n  }\r\n\r\n  private findPreset(data: SocketData) {\r\n    for (const preset of this.presets) {\r\n      const flow = preset(data)\r\n\r\n      if (flow) return flow\r\n    }\r\n    return null\r\n  }\r\n\r\n  update() {\r\n    if (!this.currentFlow) return\r\n    const socket = this.currentFlow.getPickedSocket()\r\n\r\n    if (socket) {\r\n      this.preudoconnection.render(this.areaPlugin, this.areaPlugin.area.pointer, socket)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop pseudo-connection if exists\r\n   * @emits connectiondrop\r\n   */\r\n  drop() {\r\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\r\n\r\n    if (this.currentFlow) {\r\n      this.currentFlow.drop(flowContext)\r\n      this.preudoconnection.unmount(this.areaPlugin)\r\n      this.currentFlow = null\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line max-statements\r\n  async pick(event: PointerEvent, type: EventType) {\r\n    const flowContext = { editor: this.editor, scope: this, socketsCache: this.socketsCache }\r\n    const pointedElements = elementsFromPoint(event.clientX, event.clientY)\r\n    const pickedSocket = findSocket(this.socketsCache, pointedElements)\r\n\r\n    if (pickedSocket) {\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      this.currentFlow = this.currentFlow || this.findPreset(pickedSocket)\r\n\r\n      if (this.currentFlow) {\r\n        await this.currentFlow.pick({ socket: pickedSocket, event: type }, flowContext)\r\n        this.preudoconnection.mount(this.areaPlugin)\r\n      }\r\n    } else if (this.currentFlow) {\r\n      this.currentFlow.drop(flowContext)\r\n    }\r\n    if (this.currentFlow && !this.currentFlow.getPickedSocket()) {\r\n      this.preudoconnection.unmount(this.areaPlugin)\r\n      this.currentFlow = null\r\n    }\r\n    this.update()\r\n  }\r\n\r\n  setParent(scope: Scope<Requires | K>): void {\r\n    super.setParent(scope)\r\n    this.areaPlugin = this.parentScope<BaseAreaPlugin<Schemes, BaseArea<Schemes>>>(BaseAreaPlugin)\r\n    this.editor = this.areaPlugin.parentScope<NodeEditor<Schemes>>(NodeEditor)\r\n\r\n    const pointerdownSocket = (e: PointerEvent) => {\r\n      void this.pick(e, 'down')\r\n    }\r\n\r\n    this.addPipe(context => {\r\n      if (!context || typeof context !== 'object' || !('type' in context)) return context\r\n\r\n      if (context.type === 'pointermove') {\r\n        this.update()\r\n      } else if (context.type === 'pointerup') {\r\n        void this.pick(context.data.event, 'up')\r\n      } else if (context.type === 'render') {\r\n        if (context.data.type === 'socket') {\r\n          const { element } = context.data\r\n\r\n          element.addEventListener('pointerdown', pointerdownSocket)\r\n          this.socketsCache.set(element, context.data)\r\n        }\r\n      } else if (context.type === 'unmount') {\r\n        const { element } = context.data\r\n\r\n        element.removeEventListener('pointerdown', pointerdownSocket)\r\n        this.socketsCache.delete(element)\r\n      }\r\n      return context\r\n    })\r\n  }\r\n}\r\n"],"names":["createPseudoconnection","extra","element","id","unmount","areaPlugin","removeConnectionView","mount","concat","getUID","isMounted","Boolean","render","_ref","data","x","y","isOutput","side","pointer","Error","payload","_objectSpread","source","nodeId","sourceOutput","key","target","targetInput","view","addConnectionView","emit","type","end","start","findSocket","socketsCache","elements","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","found","get","err","e","f","elementsFromPoint","_elements$","root","arguments","length","undefined","document","shadowRoot","unshift","apply","_toConsumableArray","Flow","_createClass","_classCallCheck","State","setContext","context","getSourceTarget","initial","socket","forward","backward","_ref2","_slicedToArray","canMakeConnection","makeConnection","_ref3","_ref4","editor","addConnection","Picked","_State","params","_this","_callSuper","_inherits","_pick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","drop","pickByClick","stop","pick","_x","_x2","created","scope","switchTo","Idle","_State2","_this2","_pick2","_callee2","event","_callee2$","_context2","sent","_x3","_x4","BidirectFlow","defaultMakeConnection","_pick3","_callee3","_callee3$","_context3","currentState","_x5","_x6","getPickedSocket","state","findPort","node","getNode","list","inputs","outputs","findConnections","getConnections","filter","connection","syncConnections","sockets","connections","map","port","multiple","multipleConnections","flat","commit","uniqueIds","Array","from","Set","forEach","removeConnection","PickedExisting","outputSocket","values","find","_init","_this3","then","response","init","droppedSocket","_created","_droppedSocket","_State3","_this4","_callee4","_connection","_callee4$","_context4","abrupt","item","_x7","ClassicFlow","defaultCanMakeConnection","_pick4","_callee5","_callee5$","_context5","_x8","_x9","setup","ConnectionPlugin","_Scope","_defineProperty","isPseudo","Map","addPreset","preset","presets","push","findPreset","flow","update","currentFlow","preudoconnection","area","flowContext","pointedElements","pickedSocket","clientX","clientY","preventDefault","stopPropagation","setParent","_superPropGet","parentScope","BaseAreaPlugin","NodeEditor","pointerdownSocket","addPipe","_typeof","addEventListener","set","removeEventListener","Scope"],"mappings":"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"}